from flask import Flask, request, jsonify
from PIL import Image
import os
import torch
from transformers import CLIPProcessor, CLIPModel
import requests


GROQ_API_KEY = os.getenv("GROQ_API_KEY")

# Flask App
app = Flask(__name__)

# Load CLIP Model (OpenAI) to classify user image object and its quality 
model = CLIPModel.from_pretrained("openai/clip-vit-small-patch32")
processor = CLIPProcessor.from_pretrained("openai/clip-vit-small-patch32")

# Fixed labels : - Will potentially expand dynamically by adding newly identified labels for the model to classify from later

labels = ["a cat", "a dog", "a tree", "a fish", "a house", "a car", "a person", "a flower", "a sun", "a cloud"]
qualities = ["realistic","bad drawing", "good drawing", "stick figure", "sketch"]

def describeImage(image: Image.Image):
    inputs = modelProcessor(text=labels, images=image, return_tensors="pt", padding=True)
    inputs2 = modelProcessor(text=qualities, images=image, return_tensors="pt", padding=True)

    # not a regression task so no back propogation needed , helps with efficiency of inferencing 
    with torch.no_grad():
        outputs1 = model(**inputs)

        # logits_per_image is a tensor which contains similairty scores from the models between labels and image
        # softmax used to normalize scores as probabilites out of 1
        probs1 = outputs1.logits_per_image.softmax(dim=1)

        outputs2 = model(**inputs2)
        probs2 = outputs2.logits_per_image.softmax(dim=1)

    # Gets the most probable one
    subject = labels[probs1.argmax().item()]
    quality = qualities[probs2.argmax().item()]
    return subject, quality

def reviewArt(subject, quality):
    # Prompt to instruct llama model on how to generate review of user drawing, generated by AI 
    prompt = f"""You are a snobby art critic at the Metropolitan Museum of Art. write a review in 3-4 linrs according to these rules:

Artwork Details:
- Subject: {subject}
- Style: {quality}

Special Instructions:
- If the style is "bad drawing" or "stick figure", roast it mercilessly but humorously and give a low score out of 10
- If the style is "realistic" or "good drawing", praise its technical mastery give it high score out of 10
- If the style is "sketch", evaluate its potential as a finished work give it in a range of 5-6 out of 10

Write your review in the style of a pretentious museum catalog, it will be black and white."""

    try:
        response = requests.post(
            # Using Groq API to access llama3 for review generation
            "https://api.groq.com/openai/v1/chat/completions",
            headers={"Authorization": "Bearer {GROQ_API_KEY}"},
            json={
                "model": "llama3-70b-8192",
                "messages": [{"role": "user", "content": prompt}],
                "temperature": 0.8 #Affects randomness of responses by affecting softmax functions that determine
                # probablities of the next word in the response, using 0.8 for more fresher and unique responses but still maintains
                # consistent-ish rating for the same drawing
            },
            # If no response in 10 seconds, exception is raised to prevent hanging 
            timeout=10
        )

        # Allows to identify what error is being recieved if there is one
        response.raise_for_status()
        return response.json()["choices"][0]["message"]["content"]
    except Exception as e:
        print("AI generation failed:", e)
        return "Review generation failed."

# Flask endpoint
@app.route("/review", methods=["POST"])
def review():
    # Self explanotary
    if 'image' not in request.files:
        return jsonify(error="Missing image."), 400

    try:
        image = Image.open(request.files['image']).convert("RGB")
        subject, quality = describeImage(image)
        reviewText = reviewArt(subject, quality)
        return jsonify(review=reviewText)
    except Exception as e:
        return jsonify(error=str(e)), 500

if __name__ == "__main__":
    app.run(host="0.0.0.0",port=5000)
